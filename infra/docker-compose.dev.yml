name: paystream-dev

networks:
  paystream-net:

services:
  # ---------- Infra ----------
  postgres:
    image: postgres:16
    container_name: ps-postgres
    command: >
      -c wal_level=logical
      -c max_wal_senders=10
      -c max_replication_slots=10
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-paystream}
    ports:
      - "5433:5432"
    volumes:
      - ./initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks: [paystream-net]

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: ps-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports: ["2181:2181"]
    networks: [paystream-net]

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: ps-kafka
    depends_on:
      zookeeper: { condition: service_started }
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports: ["29092:29092"]
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks: [paystream-net]

  redis:
    image: redis:7
    container_name: ps-redis
    ports: ["6379:6379"]
    networks: [paystream-net]

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.5
    container_name: ps-keycloak
    command: ["start-dev", "--http-port=8081"]
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
    ports: ["8081:8081"]
    networks: [paystream-net]

  weaviate:
    image: semitechnologies/weaviate:1.24.10
    container_name: ps-weaviate
    environment:
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
    ports: ["8082:8080"]
    networks: [paystream-net]

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: ps-kafka-ui
    depends_on:
      kafka: { condition: service_started }
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    ports: ["8080:8080"]
    networks: [paystream-net]

  # ---------- Platform Apps ----------
  service-registry:
    container_name: ps-eureka
    build:
      context: ..
      dockerfile: platform/service-registry/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports: ["8761:8761"]
    networks: [paystream-net]

  api-gateway:
    container_name: ps-gateway
    build:
      context: ..
      dockerfile: platform/api-gateway/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_URL: http://service-registry:8761/eureka
    ports: ["8084:8080"]
    depends_on:
      service-registry: { condition: service_started }
    networks: [paystream-net]

  # ---------- Core Apps ----------
  account-service:
    container_name: ps-account
    build:
      context: ..
      dockerfile: core/account-service/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_URL: http://service-registry:8761/eureka
      SERVER_PORT: 9000
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/paystream
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    ports: ["9000:9000"]
    depends_on:
      postgres: { condition: service_healthy }
      service-registry: { condition: service_started }
    networks: [paystream-net]

  ledger-service:
    container_name: ps-ledger
    build:
      context: ..
      dockerfile: core/ledger-service/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 9100
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/paystream
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka
    ports: ["9100:9100"]
    depends_on:
      postgres: { condition: service_healthy }
      kafka: { condition: service_started }
      service-registry: { condition: service_started }
    networks: [paystream-net]

  transfer-service:
    container_name: ps-transfer
    build:
      context: ..
      dockerfile: core/transfer-service/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/paystream
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    ports: ["8085:8085"]
    depends_on:
      postgres: { condition: service_healthy }
      kafka: { condition: service_started }
      service-registry: { condition: service_started }
      ledger-service: { condition: service_started }
    networks: [paystream-net]

  payment-service:
    container_name: ps-payment
    build:
      context: ..
      dockerfile: core/payment-service/Dockerfile
    image: paystream/payment-service:dev
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/paystream
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka
    ports: ["9095:9095"]
    depends_on:
      postgres: { condition: service_healthy }
      kafka: { condition: service_started }
      service-registry: { condition: service_started }
    restart: unless-stopped
    networks: [paystream-net]
