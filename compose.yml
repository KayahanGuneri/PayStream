# compose.yml
name: paystream

networks:
  paystream:

volumes:
  pg_data:
  weaviate_data:

services:
  # ========= INFRA =========
  postgres:
    image: postgres:16
    container_name: ps-postgres
    ports: ["5433:5432"]   # host 5433 -> container 5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: paystream
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./docker/initdb:/docker-entrypoint-initdb.d   # e.g., create-ledgerdb.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d paystream"]
      interval: 5s
      timeout: 3s
      retries: 30
    networks: [paystream]
    profiles: ["core"]

  redis:
    image: redis:7
    container_name: redis
    ports: ["6379:6379"]
    networks: [paystream]
    profiles: ["core"]

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    ports: ["2181:2181"]
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks: [paystream]
    profiles: ["messaging"]

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_started
    ports: ["29092:29092"]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks: [paystream]
    profiles: ["messaging"]

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.5
    container_name: keycloak
    command: ["start-dev", "--http-port=8081"]
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
    ports: ["8081:8081"]
    networks: [paystream]
    profiles: ["auth"]

  weaviate:
    image: semitechnologies/weaviate:1.24.10
    container_name: weaviate
    ports: ["8082:8080"]
    environment:
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
      PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
    volumes: ["weaviate_data:/var/lib/weaviate"]
    networks: [paystream]
    profiles: ["ai"]

  # ========= PLATFORM =========
  service-registry:
    build:
      context: .
      dockerfile: platform/service-registry/Dockerfile
    image: paystream/service-registry:dev
    container_name: service-registry
    ports: ["8761:8761"]
    networks: [paystream]
    profiles: ["platform"]

  api-gateway:
    build:
      context: .
      dockerfile: platform/api-gateway/Dockerfile
    image: paystream/api-gateway:dev
    container_name: api-gateway
    depends_on:
      service-registry:
        condition: service_started
    ports: ["8080:8080"]
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka
    networks: [paystream]
    profiles: ["platform"]

  # ========= SERVICES =========
  account-service:
    build:
      context: .
      dockerfile: core/account-service/Dockerfile
    image: paystream/account-service:dev
    container_name: account-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_started
      service-registry:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/paystream
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka
    ports: ["9000:9000"]
    networks: [paystream]
    profiles: ["services"]

  ledger-service:
    build:
      context: .
      dockerfile: core/ledger-service/Dockerfile
    image: paystream/ledger-service:dev
    container_name: ledger-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      service-registry:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: dev
      LEDGER_DB_URL: jdbc:postgresql://postgres:5432/ledgerdb
      LEDGER_DB_USER: ${POSTGRES_USER:-postgres}
      LEDGER_DB_PASS: ${POSTGRES_PASSWORD:-postgres}
      KAFKA_BOOTSTRAP: kafka:9092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka
    ports: ["9100:9100"]
    networks: [paystream]
    profiles: ["services"]

  transfer-service:
    build:
      context: .                                # repo kökü
      dockerfile: core/transfer-service/Dockerfile
    image: paystream/transfer-service:dev
    container_name: transfer-service
    depends_on:
      postgres: { condition: service_healthy }
      kafka: { condition: service_started }
      service-registry: { condition: service_started }
    environment:
      SPRING_PROFILES_ACTIVE: docker            # application-docker.yml okunur
      EUREKA_URL: http://service-registry:8761/eureka
    ports: [ "8085:8085" ]
    networks: [ paystream ]
    profiles: [ "services" ]

