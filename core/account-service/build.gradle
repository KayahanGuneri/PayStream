plugins {
  id 'org.springframework.boot' version '3.3.2'
  id 'io.spring.dependency-management' version '1.1.5'
  id 'java'
  id 'jacoco'
}

group = 'com.paystream'
version = '0.0.1-SNAPSHOT'

java {
  toolchain { languageVersion = JavaLanguageVersion.of(21) }
}

ext {
  springCloudVersion = '2023.0.4'
  flywayVersion      = '10.10.0'
  springdocVersion   = '2.5.0'
}

repositories {
  mavenCentral()
}

/* -----------------------------------------
 *  TEST KLASÖRLERİ (unit + integration dahil)
 * ----------------------------------------- */
sourceSets {
  test {
    java.srcDirs = [
            'src/test/java',
            'src/test/unit/java',
            'src/test/integration/java'
    ]
    resources.srcDirs = [
            'src/test/resources',
            'src/test/unit/resources',
            'src/test/integration/resources'
    ]
  }
}

dependencies {
  /* ------------ WEB & VALIDATION & SECURITY --------------- */
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'

  /* ------------ JDBC / POSTGRES --------------------------- */
  implementation 'org.springframework.boot:spring-boot-starter-jdbc'
  runtimeOnly 'org.postgresql:postgresql'

  /* ------------ DISCOVERY --------------------------------- */
  implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

  /* ------------ FLYWAY & JSON ---------------------------- */
  implementation "org.flywaydb:flyway-core:${flywayVersion}"
  implementation "org.flywaydb:flyway-database-postgresql:${flywayVersion}"
  implementation 'com.fasterxml.jackson.core:jackson-databind'

  /* ------------ OPENAPI / SWAGGER ------------------------ */
  implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

  /* ------------ PAYSTREAM COMMON LIB --------------------- */
  implementation project(':common:common-lib')

  /* ------------ LOMBOK ----------------------------------- */
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
  testCompileOnly 'org.projectlombok:lombok'
  testAnnotationProcessor 'org.projectlombok:lombok'

  /* ------------ TESTLER ---------------------------------- */
  testImplementation 'org.springframework.boot:spring-boot-starter-test'

  // Testcontainers (BOM + modüller)
  testImplementation platform("org.testcontainers:testcontainers-bom:1.20.1")
  testImplementation "org.testcontainers:junit-jupiter"
  testImplementation "org.testcontainers:postgresql"

  implementation 'org.springframework.boot:spring-boot-starter-actuator'

  implementation 'org.springframework.kafka:spring-kafka'
}

/* ----------- SPRING CLOUD BOM ------------ */
dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

/* ----------- JACOCO AYARLARI ------------- */
jacoco {
  toolVersion = "0.8.12"
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()
  jacoco {
    includeNoLocationClasses = true
    excludes = ['jdk.internal.*']
  }
}

/* ----------- RAPOR AYARLARI ------------- */
tasks.named('jacocoTestReport') {
  dependsOn tasks.test
  reports {
    html.required = true    // build/reports/jacoco/test/html/index.html
    xml.required  = true
    csv.required  = false
  }

  def excludes = [
          'com/paystream/accountservice/AccountServiceApplication*',
          'com/paystream/accountservice/infra/config/**',
          '**/*Request*', '**/*Response*', '**/*Dto*',
          '**/RowMappers*'
  ]

  classDirectories.setFrom(
          files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludes)
          })
  )
}

/* ----------- COVERAGE KONTROLÜ ---------- */
tasks.named('jacocoTestCoverageVerification') {
  violationRules {
    rule {
      element = 'BUNDLE'
      limit {
        counter = 'LINE'
        value   = 'COVEREDRATIO'
        minimum = 0.45   // <-- 0.75 yerine 0.45 (veya 0.50) yap
      }
    }
  }
  dependsOn tasks.test
}


/* ----------- TEST -> RAPOR BAĞLANTISI --- */
tasks.named('check') {
  dependsOn tasks.jacocoTestCoverageVerification
}

tasks.named('test') {
  finalizedBy tasks.jacocoTestReport
}
